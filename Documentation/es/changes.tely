\input texinfo @c -*- coding: utf-8; mode: texinfo; documentlanguage: es -*-
@ignore
    Translation of GIT committish: ce1c0fabb3d5ac18e61fb8fcc91a3990714553c2

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore
@setfilename lilypond-changes.info
@settitle Registro de cambios de LilyPond

@include macros.itexi

@ifhtml
@macro inputfileref{DIR,NAME}
@uref{../../\DIR\/collated-files.html#\NAME\,@file{\DIR\/\NAME\}}@c
@end macro
@macro usermanref{NAME}
@inforef{\NAME\,,../user/lilypond/lilypond}@c
@end macro
@end ifhtml

@ifnothtml
@macro inputfileref{DIR,NAME}
@file{\DIR\/\NAME\}@c
@end macro
@macro usermanref{NAME}
Véase el manual del usuario, \NAME\
@end macro
@end ifnothtml

@macro textanchor{NAME}
@html
<a name="\NAME\"></a>
@end html
@end macro


@documentencoding UTF-8
@documentlanguage es
@afourpaper
@c Translators: Francisco Vila

@finalout

@node Top
@top Funcionalidades nuevas de la versión 2.16 desde la 2.14

@allowcodebreaks false

@itemize

@ignore

HINTS

* add new items at the top

* only show verbatim input for syntax/input changes

* try to be as brief possible in those cases

* don't try to provide real-world examples, they often get too big,
which scares away people.

* Write complete sentences.

* only show user-visible changes.

@end ignore

@item
El uso de las especificaciones de @code{\tempo} en los bloques
@code{\midi} (eliminados en la versión 2.9.16 en favor del ajuste
explícito de @code{tempoWholesPerMinute}) ha resurgido: ahora
cualquier clase de música que efectúe ajustes de propiedades se
convierte en definiciones de contexto dentro de las especificaciones
de salida, permitiendo declaraciones como
@example
\layout @{ \accidentalStyle modern @}
\midi @{ \tempo 4. = 66 @}
@end example

@item
Se ha rediseñado la clave de Sol de LilyPond: el bucle superior está
más equilibrado, el gancho inferior sobresale menos y la línea
vertical principal ("spine") está curvada de forma más regular.
Pueden compararse las versiones vieja y nueva consultando la
documentación:
@uref{http://lilypond.org/doc/v2.14/Documentation/notation/the-feta-font.html#clef-glyphs,
versión antigua},
@uref{http://lilypond.org/doc/v2.15/Documentation/notation/the-feta-font.html#clef-glyphs,
versión nueva}.

@item
Se han simplificado las instrucciones de los sellos de elementos
gráficos para permitir una menor duplicación de código y mejores
aproximaciones de altura de los objetos gráficos.  Se han eliminado
las siguientes instrucciones de sello:
@itemize
@item @code{beam}
@item @code{bezier-sandwich}
@item @code{bracket}
@item @code{dashed-slur}
@item @code{dot}
@item @code{oval}
@item @code{repeat-slash}
@item @code{zigzag-line}
@end itemize

@item
Ahora se tratan los corchetes como objetos diferenciados y no como
parte de la plica.
@lilypond[fragment,quote,relative=2]
\override Flag #'color = #red
g8
@end lilypond

@item
Se puede elegir entre dos métodos de numeración de compases, en
especial para cuando se emplean repeticiones:

@lilypond[fragment,quote,relative=1,noragged-right]
\relative c'{
  \set Score.alternativeNumberingStyle = #'numbers
  \repeat volta 3 { c4 d e f | }
    \alternative {
      { c4 d e f | c2 d \break }
      { f4 g a b | f4 g a b | f2 a | \break }
      { c4 d e f | c2 d }
    }
  c1 \break
  \set Score.alternativeNumberingStyle = #'numbers-with-letters
  \repeat volta 3 { c,4 d e f | }
    \alternative {
      { c4 d e f | c2 d \break }
      { f4 g a b | f4 g a b | f2 a | \break }
      { c4 d e f | c2 d }
    }
  c1
}
@end lilypond

@item
Lo que sigue es un cambio fundamental en la representación que
LilyPond hace de la música: los eventos de duración como
@code{LyricEvent} y @code{NoteEvent} ya no se encuentran envueltos
dentro de elementos @code{EventChord} a no ser que se hayan escrito
realmente como parte de un acorde.  Si manipulamos expresiones
musicales en Scheme, el nuevo comportamiento puede necesitar cambios
en nuestro código.  Las llamadas a la función musical
@code{\eventChords} o a la función de Scheme @code{event-chord-wrap!}
convierten a la representación anterior; la utilización de una
cualquiera de ellas puede ser la vía más sencilla para mantener
operativo el código tradicional.

Los tres siguientes elementos de la lista son consecuencia de este
cambio.

@item
Se ha reimplementado la abreviatura de ayuda para intruducción
repetitiva de acordes, @code{q}.  Ahora los acordes repetidos se
sustituyen justo antes de la interpretación de la expresión musical.
En caso de que el usuario quiera retener ciertos eventos del acorde
original, puede ejecutar manualmente la función @code{\chordRepeats}
de sustitución de acordes de repetición.

@item
Los números de cuerdas y digitaciones de la mano derecha sobre notas
individuales aparecen ahora sin tener que escribirlas dentro de
corchetes de acorde.

@item
Ahora las funciones musicales funcionan igual cuando se usan dentro o
fuera de los acordes, incluidas todas las posibilidades de la
exploración de argumentos.  Las variables musicales se pueden usar
dentro de acordes: una construcción como
@lilypond[verbatim,quote,ragged-right]
tonic=fis'
{ <\tonic \transpose c g \tonic> }
@end lilypond
@noindent
ahora funciona como se espera.  Puede utilizarse @code{#@{@dots{}#@}}
para la construcción de componentes de acordes.  Ahora @code{\tweak}
funciona sobre notas individuales sin necesidad de incluirlas dentro
de un acorde.  Ahora es posible usarla dentro de eventos de
instrucciones y letra de canciones, pero aún no es probable que
ofrezca resultados.

@item
@code{\tweak} now takes an optional layout object specification.  It can
be used for tweaking layout objects that are only indirectly caused by
the tweaked event, like accidentals, stems, and flags:

@lilypond[verbatim,quote,ragged-right,relative=2]
<\tweak Accidental #'color #red   cis4
 \tweak Accidental #'color #green es
                                  g>
@end lilypond

@item
Las expresiones de Scheme dentro de fragmentos de código de LilyPond
incrustados (@code{#@{@dots{}#@}}) se ejecutan ahora dentro de la
cerradura léxica del código de Scheme circundante.  El símbolo
@code{$} ya no es especial dentro del código de LilyPond incrustado.
Se puede utilizar de forma incondicional dentro de código de LilyPond
para su evaluación inmediata, de forma parecida a la forma en que se
utilizaba anteriormente @code{ly:export}.  Se ha suprimido
@code{ly:export}.  Como consecuencia, ahora @code{#} está libre para
diferir la evaluación de su argumento hasta que el analizador
sintáctico reduzca efectivamente la expresión contenida, reduciendo
significativamente el potencial de la evaluación prematura.

@item
Se ha mejorado el soporte de acordes de tipo jazz: se reconocen los
acordes lidios y alterados; ahora se tratan los separadores entre
modificadores de acorde de forma independiente de los separadores
entre acordes invertidos y sus notas de bajo (y por omisión, la barra
inclinada se usa ahora solamente para el último tipo de separador);
las notas adicionales ya no van prefijadas por "add" de forma
predeterminada; y la "m" en los acordes menores se puede personalizar.
Consulte @ruser{Nombres de acorde personalizados} para más
información.

@item
Se ha cambiado el nombre de la instrucción @code{\markuplines} por
@code{\markuplist} para conseguir una mejor correspondencia con su
semántica y con la nomenclatura general de LilyPond.

@item
Se ha simplificado considerablemente la interfaz para especificar
afinaciones en las tablaturas y se emplea la función de Scheme
@code{\stringTuning} para la mayor parte de los propósitos.

@item
Las barras ahora pueden preservar la inclinación por encima de los
saltos de línea.
@lilypond[fragment,quote,relative=2]
\override Beam #'breakable = ##t
a8[ b c d e f g \bar "" \break f e d c b a]
\once \override Beam #'positions = #beam::align-with-broken-parts
a8[ b c d e f g \bar "" \break f e d c b a]
\once \override Beam #'positions = #beam::slope-like-broken-parts
a8[ b c d e f g \bar "" \break f e d c b a]
@end lilypond
Para hacerlo, se han hecho obsoletas varias funciones de "callback".
@itemize
@item @code{ly:beam::calc-least-squares-positions}
@item @code{ly:beam::slope-damping}
@item @code{ly:beam::shift-region-to-valid}
@end itemize
Además, @code{ly:beam::quanting} ahora acepta un argumento adicional
para ayudar a los cálculos sobre los cambios de línea.  Todas estas
funciones se llaman automáticamente cuando se ajusta el parámetro
@code{positions}.

@item
En los argumentos de función, la música, los elementos de marcado y
las expresiones de Scheme (así como algunas otras entidades
sintácticas) se han hecho mayormente intercambiables y se diferencian
solamente mediante la evaluación del predicado respectivo.  En ciertos
casos, el analizador sintáctico consulta este predicado, como cuando
se decide si interpretar @code{-3} como un número o como un evento de
digitación.

@item
Ahora se pueden definir las funciones musicales (y sus parientes
cercanos) con argumentos opcionales.

@item
Para definir instrucciones que se ejecutan solamente por sus efectos
secundarios, ahora está disponible @code{define-void-function}.

@item
Hay una instrucción nueva @code{define-event-function} en analogía con
@code{define-music-function} que se puede usar para definir funciones
musicales que actúan como post-eventos sin que se requiera un especificador
de dirección como (@code{-}, @code{^} o @code{_}) antes de ellos.

@lilypond[quote,verbatim,ragged-right]
dyn=#(define-event-function (parser location arg) (markup?)
         (make-dynamic-script arg))
\relative c' { c\dyn pfsss }
@end lilypond

@item
Se puede incluir una lista de alias en ASCII para caracteres
especiales.

@lilypond[quote,verbatim]
\paper {
  #(include-special-characters)
}
\markup "&bull; &dagger; &copyright; &OE; &ss; &para;"
@end lilypond

@item
Hay una instrucción nueva @code{define-scheme-function} en analogía
con @code{define-music-function} que puede usarse para definir
funciones que se evalúan a expresiones de Scheme pero aceptan
argumentos en la sintaxis de LilyPond.

@item
Ahora se puede utilizar la construcción @code{#@{ @dots{} #@}} no solo
para crear listas secuenciales de música, sino también para alturas
(que se distinguen de los eventos de nota sencillos por la ausencia de
duración u otra información que no puede formar parte de una altura),
eventos musicales únicos, expresiones musicales vacías, post-eventos,
elementos de marcado (sobre todo para liberar a los usuarios de la
necesidad de usar la macro @code{markup}), listas de marcado,
expresiones numéricas, definiciones y modificaciones de contextos y
algunas otras cosas.  Si no contiene nada o contiene un único evento
musical, ya no devuelve una lista secuencial de música, sino una
expresión musical vacía o simplemente el propio evento musical,
respectivamente.

@item
Se pueden usar alturas en la parte derecha de las asignaciones.  Las
alturas se diferencian de los eventos de una sola nota en que no
tienen duración ni otras informaciones que no pueden formar parte de
una altura.

@item
Nueva opción de la línea de órdenes @option{--loglevel=@var{level}}
para controlar el volumen de datos que LilyPond produce en la salida.
Los valores posibles son ERROR (errores), WARN (advertencias),
BASIC_PROGRESS (progreso básico), PROGRESS (progreso) y DEBUG
(depuración).

@item
@code{\once \set} ahora reinicia correctamente el valor de la
propiedad al valor previo.

@lilypond[fragment,quote,relative=2]
  \set fingeringOrientations = #'(left)
  <e-1>4
  \once \set fingeringOrientations = #'(right)
  <e-1>
  <e-1>-"left"
@end lilypond

@item
La alineación de los elementos de matiz dinámico extensos
(reguladores, crescendi textuales, etc.) se divide automáticamente si
se da explícitamente una dirección distinta.

@lilypond[fragment,quote,relative=2]
c4_\< c c^\> c c1_\p
@end lilypond


@item
Ahora las apoyaturas y mordentes funcionan también dentro de una
ligadura de expresión, y no solo dentro de una ligadura de fraseo.
Asimismo, se ha añadido la función @code{\slashedGrace} que no imprime
ninguna ligadura partiendo de la nota del mordente.

@lilypond[fragment,relative=2]
c4( \appoggiatura e8 d4 \acciaccatura e8 d4 \slashedGrace e8 c4)
@end lilypond


@item
Para suprimir a línea en un elemento de crescendo extenso (y otros
elementos extensos similares), LilyPond contempla ahora de forma plena
la propiedad @code{#'style = #'none}.

@lilypond[fragment,quote,relative=2]
\override DynamicTextSpanner #'style = #'none
c4\cresc c c g, c'\p
@end lilypond

@item
LilyPond.app está disponible ahora para MacOS X 10.7. ¡Gracias,
Christian Hitz!

@item
Los glissandos pueden abarcar varias líneas.

@end itemize

@ifhtml
Para ver noticias anteriores, diríjase a
@uref{http://lilypond.org/doc/v2.14/Documentation/changes/},
@uref{http://lilypond.org/doc/v2.12/Documentation/topdocs/NEWS.html},
o @uref{../,vuelva} al índice de la documentación.


@end ifhtml

@bye
